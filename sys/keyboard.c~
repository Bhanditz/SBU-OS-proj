#include <sys/pic.h>
#include <sys/isr.h>
#include <sys/sbunix.h>
#include <sys/keyboard.h>

//volatile int cnt;
volatile int SHIFT;
volatile int CONTROL;
volatile uint8_t key_val; //initiate 0 as a space
volatile uint8_t key_val2; //initiate 0 as a space



//isr_33
void print_key(uint8_t);
void print_key2(uint8_t);

void keyboard_handler() {
	uint8_t key_code;

	//printf("INT 33 happen!: %d\n", cnt);
	key_code = inb(0x60);
	printf("read from the port: %x\n", key_code);

	//deal with the different situation
	if(key_code == 0x2A) {
		if(CONTROL != 1) {
			SHIFT = 1;
		}
	} else if(key_code == 0x1D) {
		CONTROL = 1;
	} else {
		//the normal pressed
		if(key_code >= KB_1 && key_code <= KB_EQUAL) {
			if(SHIFT == 1) {
				key_val = "!@#$%^&*()_+"[key_code - KB_1];
				key_val2 = 0;
			} else {
				key_val = "1234567890-="[key_code - KB_1];
				key_val2 = 0;
			}
		} else if(key_code >= KB_Q && key_code <= KB_R_BRACKET) {
			if(SHIFT == 1) {
				key_val = "QWERTYUIOP{}"[key_code - KB_Q];
				key_val2 = 0;
			} else if(CONTROL == 1) {
				key_val = '^';
				key_val2 = "QWERTYUIOP[]"[key_code - KB_Q];
			} else {
				key_val = "qwertyuiop[]"[key_code - KB_Q];
				key_val2 = 0;
			}
		} else if(key_code >= KB_A && key_code <= KB_L) {
			if(SHIFT == 1) {
				key_val = "ASDFGHJKL"[key_code - KB_A];
				key_val2 = 0;
			} else if(CONTROL == 1) {
				key_val = '^';
				key_val2 = "ASDFGHJKL"[key_code - KB_A];
			} else {
				key_val = "asdfghjkl"[key_code - KB_A];
				key_val2 = 0;
			}
		} else if(key_code >= KB_Z && key_code <= KB_M) {
			if(SHIFT == 1) {
				key_val = "ZXCVBNM"[key_code - KB_Z];
				key_val2 = 0;
			} else if(CONTROL == 1) {
				key_val = '^';
				key_val2 = "ZXCVBNM"[key_code - KB_Z];
			} else {
				key_val = "zxcvbnm"[key_code - KB_Z];
				key_val2 = 0;
			}
		} else if(key_code >= KB_COMMA && key_code <= KB_L_SLASH) {
			if(SHIFT == 1) {
				key_val = "<>?"[key_code - KB_COMMA];
				key_val2 = 0;
			} else {
				key_val = ",./"[key_code - KB_COMMA];
				key_val2 = 0;
			}
		} else if(key_code >= KB_SEMICOLON && key_code <= KB_QUOTE) {
			if(SHIFT == 1) {
				key_val = ":\""[key_code - KB_SEMICOLON];
				key_val2 = 0;
			} else {
				key_val = ";'"[key_code - KB_SEMICOLON];
				key_val2 = 0;
			}
		} else if(key_code >= KB_F1 && key_code <= KB_F9) {
			key_val = 'F';
			key_val2 = "123456789"[key_code - KB_F1];
		} else if(key_code == KB_ENTER) {
			key_val = '\\';
			key_val2 = 'n';
		} else if(key_code == KB_SPACE) {
			key_val = ' ';
			key_val2 = 0;
		}

		//reset the flags
		SHIFT = 0;
		CONTROL = 0;	
	}

	pic_sendEOI(33);
	//cnt++;
	print_key(key_val);
	print_key2(key_val2);
}

void print_key(uint8_t key) {
	register char* pos = (char*)0xb8000 + 160*23;
	*pos = key;
	pos = (char*)0xb8000 + 160*23 + 2;
	*pos = 0;
}

void print_key2(uint8_t key) {
	register char* pos = (char*)0xb8000 + 160*23 + 2;
	*pos = key;
}
